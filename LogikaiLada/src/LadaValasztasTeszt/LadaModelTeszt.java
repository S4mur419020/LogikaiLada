package LadaValasztasTeszt;

import modell.LadaModell;
import nezet.GuiNezet;
import vezerlo.LogikaiLadaController;

public class LadaModelTeszt {

    public static void main(String[] args) {
        LadaModelTeszt teszt = new LadaModelTeszt();
        LogikaiLadaControllerTeszt logikaiteszt = new LogikaiLadaControllerTeszt();
        //Boti
        teszt.tesztFeliratok();
        teszt.tesztKincsesLada();
        
        //Tomi
        teszt.tesztNemLetezoLada();
        logikaiteszt.tesztKincsTalalat();
        
        //Bence
        teszt.tesztVisszajelzesSzoveg();
        teszt.tesztHibasLadaAzonosito();
        
        System.out.println("Az √∂sszes teszt lefutott!");
    }

    private void tesztFeliratok() {
        try {
            LadaModell arany = new LadaModell("Arany", "√ân rejtem a kincset!", false);
            LadaModell ezust = new LadaModell("Ez√ºst", "Nem √©n rejtem a kincset!", false);
            LadaModell bronz = new LadaModell("Bronz", "Az arany l√°da hazudik!", false);

            assert !arany.getFelirat().isBlank() : "Arany l√°d√°nak nincs felirata";
            assert !ezust.getFelirat().isBlank() : "Ez√ºst l√°d√°nak nincs felirata";
            assert !bronz.getFelirat().isBlank() : "Bronz l√°d√°nak nincs felirata";

            assert arany.getFelirat().contains("rejtem") : "Arany felirat hib√°s";
            assert ezust.getFelirat().contains("Nem √©n") : "Ez√ºst felirat hib√°s";
            assert bronz.getFelirat().contains("hazudik") : "Bronz felirat hib√°s";

            System.out.println("‚úÖ tesztFeliratok sikeres");
        } catch (AssertionError e) {
            System.err.println("‚ùå tesztFeliratok hiba: " + e.getMessage());
        }
    }

    private void tesztKincsesLada() {
        try {
            LadaModell arany = new LadaModell("Arany", "√ân rejtem a kincset!", true);
            LadaModell ezust = new LadaModell("Ez√ºst", "Nem √©n rejtem a kincset!", false);
            LadaModell bronz = new LadaModell("Bronz", "Az arany l√°da hazudik!", false);

            int kincsDb = 0;
            if (arany.isTartalmazKincset()) {
                kincsDb++;
            }
            if (ezust.isTartalmazKincset()) {
                kincsDb++;
            }
            if (bronz.isTartalmazKincset()) {
                kincsDb++;
            }

            assert kincsDb == 1 : "Nem pontosan egy l√°d√°ban van kincs";

            System.out.println("‚úÖ tesztKincsesLada sikeres");
        } catch (AssertionError e) {
            System.err.println("‚ùå tesztKincsesLada hiba: " + e.getMessage());
        }
    }

    private void tesztNemLetezoLada() {
        try {
            new LadaModell("", "", false);
            System.err.println("‚ùå √ºres n√©vvel is l√©trej√∂tt a l√°da");
        } catch (IllegalArgumentException e) {
            System.out.println("‚úÖ tesztNemLetezoLada sikeres");
        }
    }

    public static class LogikaiLadaControllerTeszt {

        private void tesztKincsTalalat() {
            try {
                GuiNezet nezet = new GuiNezet();
                LadaModell modell = new LadaModell("Arany", "√ân rejtem a kincset!", true);
                LogikaiLadaController vezerlo = new LogikaiLadaController(modell, nezet);

                nezet.getRdbArany().doClick(); // kattint√°s szimul√°l√°sa

                String szoveg = ""; // Itt van a visszajelz√©s

                assert szoveg.contains("Gratul√°lok") : "Nem a megfelel≈ë visszajelz√©st kaptuk: " + szoveg;

                System.out.println("‚úÖ tesztKincsTalalat sikeres");
            } catch (AssertionError e) {
                System.err.println("‚ùå tesztKincsTalalat hiba: " + e.getMessage());
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è tesztKincsTalalat kiv√©tel: " + e.getMessage());
            }
        }

        private void tesztVisszajelzesSzoveg() {
            try {
                GuiNezet nezet = new GuiNezet();
                LadaModell modell = new LadaModell("Arany", "√ân rejtem a kincset!", true);
                new LogikaiLadaController(modell, nezet);

                String uzenet = "üéâ Gratul√°l A(z) Arany l√°d√°ban volt a kincs!";
                nezet.mutat(uzenet);

                assert nezet.getjLabel1() != null : "A visszajelz√©s nem jelent meg";
                System.out.println("‚úÖ tesztVisszajelzesSzoveg sikeres");
            } catch (AssertionError e) {
                System.err.println("‚ùå tesztVisszajelzesSzoveg hiba: " + e.getMessage());
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è tesztVisszajelzesSzoveg kiv√©tel: " + e.getMessage());
            }
        }

        private void tesztHibasLadaAzonosito() {
            try {
                GuiNezet nezet = new GuiNezet();
                LadaModell modell = new LadaModell("Diamant", "Rejtett kincs", true); // l√©tez≈ë l√°d√°kon k√≠v√ºl
                LogikaiLadaController vezerlo = new LogikaiLadaController(modell, nezet);

                // Nincs megfelel≈ë r√°di√≥gomb, de pr√≥b√°ljuk meg "kiv√°lasztani"
                boolean talalat = false;
                if ("Arany".equals(modell.getNev())) {
                    nezet.getRdbArany().doClick();
                } else if ("Ez√ºst".equals(modell.getNev())) {
                    nezet.getRdbEzust().doClick();
                } else if ("Bronz".equals(modell.getNev())) {
                    nezet.getRdbBronz().doClick();
                } else {
                    talalat = true; // nincs r√°di√≥gomb a modell nev√©n√©l
                }
                assert talalat : "A vez√©rl≈ë nem kezelte a nem l√©tez≈ë l√°d√°t";

                System.out.println("‚úÖ tesztHibasLadaAzonosito sikeres");
            } catch (AssertionError e) {
                System.err.println("‚ùå tesztHibasLadaAzonosito hiba: " + e.getMessage());
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è tesztHibasLadaAzonosito kiv√©tel: " + e.getMessage());
            }
        }
    }
}
