package LadaValasztasTeszt;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import modell.LadaModell;
import nezet.GuiNezet;
import vezerlo.LogikaiLadaController;

public class LadaModelTeszt {

    public static void main(String[] args) {


        /*Boti*/
        //tesztFeliratokTartalmazzakASzuksegesSzovegeket();
        //tesztHibasHossz();
        //tesztMelyikAKincs();
        //tesztMasSzovegetTartalmazLada();
        tesztMasSzovegetTartalmazLada();

        /*Bence*/
        tesztNevHibasKivetel();
        tesztFeliratHibasKivetel();
        tesztToString();

        /*Tomi*/
        tesztHelyesValasztas();
        tesztHelytelenValasztas();
        tesztMegfeleloSzobeg();

        System.out.println("\nMinden teszt lefutott hiba n√©lk√ºl!");
    }

    private static void tesztFeliratokTartalmazzakASzuksegesSzovegeket() {
        try {
            GuiNezet nezet = new GuiNezet();

            JRadioButton arany = nezet.getRdbArany();
            JRadioButton ezust = nezet.getRdbEzust();
            JRadioButton bronz = nezet.getRdbBronz();

            assert arany.getText().equals("rany") : "Az arany l√°da felirata hib√°s";
            assert ezust.getText().equals("ez√ºst") : "Az ez√ºst l√°da felirata hib√°s";
            assert bronz.getText().equals("bronz") : "A bronz l√°da felirata hib√°s";

            JLabel aranySzoveg = nezet.getjLabel1();
            JLabel ezustSzoveg = nezet.getjLabel2();
            JLabel bronzSzoveg = nezet.getjLabel3();

            assert aranySzoveg.getText().equals("rejtem a kincset!") : "Az arany l√°da felirata hib√°s";
            assert ezustSzoveg.getText().equals("Nem √©n rejtem a kincset!") : "Az ez√ºst l√°da felirata hib√°s";
            assert bronzSzoveg.getText().equals("Az arany l√°da hazudik!") : "A bronz l√°da felirata hib√°s";

        } catch (AssertionError hiba) {
            System.err.println("‚ùå Hiba a teszt sor√°n: " + hiba.getMessage());
        } catch (Exception hiba) {
            System.err.println("‚ö†Ô∏è V√°ratlan hiba t√∂rt√©nt: " + hiba.getMessage());
        }
        System.out.println("‚úÖ tesztFeliratokTartalmazzakASzuksegesSzovegeket lefutott");
    }

    public static void tesztHibasHossz() {
        LadaModell arany = new LadaModell("Arany", "√ân rejtem a kincset.", false);
        LadaModell ezust = new LadaModell("Ez√ºst", "Nem √©n rejtem a kincset.", true);
        LadaModell bronz = new LadaModell("Bronz", "Az arany l√°da hazudik.", false);

        LadaModell[] ladak = {arany, ezust, bronz};

        int darab = 1;//hiba
        int ladaDb = ladak.length;

        assert ladaDb == darab : "A l√°d√°k sz√°ma hib√°s! (" + ladaDb + " db l√°da kell, nem " + darab + ")";
        System.out.println("tesztHibasHossz() hiba n√©lk√ºl lefutott");
    }

    public static void tesztMelyikAKincs() {
        LadaModell arany = new LadaModell("Arany", "√ân rejtem a kincset.", false);
        LadaModell ezust = new LadaModell("Ez√ºst", "Nem √©n rejtem a kincset.", false);
        LadaModell bronz = new LadaModell("Bronz", "Az arany l√°da hazudik.", true);

        LadaModell[] ladak = {arany, ezust, bronz};

        int kincsesDb = 0;
        //for-each
        for (LadaModell lada : ladak) {
            if (lada.isTartalmazKincset()) {
                kincsesDb++;
                assert lada.getNev().equals("Ez√ºst") : "Nem az ez√ºst l√°d√°ban van a kincs!";
            }
        }
    }

    private static void tesztMasSzovegetTartalmazLada() {
        try {
            LadaModell hibasLada = new LadaModell("Arany", "Valami m√°s sz√∂veg", true);
            String szoveg = "√ân rejtem a kincset!";

            assert hibasLada.getFelirat().equals(szoveg) : "Hib√°s felirat az " + hibasLada.getNev() + " l√°d√°n: \"" + hibasLada.getFelirat() + "\" (Nem a " + szoveg + " a sz√∂veg)";
        } catch (AssertionError hiba) {
            System.err.println("‚ùå HIBA elkapva (tesztMasSzovegetTartalmazLada): " + hiba.getMessage());
        }
        System.out.println("‚úÖ tesztMasSzovegetTartalmazLada sikeresen lefutott (helyes felirat).");
    }

   private static void tesztHibasLadaHivatkozas() {
    LadaModell arany = new LadaModell("Arany", "√ân rejtem a kincset.", false);
    LadaModell ezust = new LadaModell("Ez√ºst", "Nem √©n rejtem a kincset.", true);
    LadaModell bronz = new LadaModell("Bronz", "Az arany l√°da hazudik.", false);
    LadaModell[] ladak = {arany, ezust, bronz};

    boolean tortentHiba = false;

    try {
        int hivatkozas = 3; // Ez hib√°s index (l√©tez≈ë l√°d√°k: 0,1,2)
        LadaModell lada = ladak[hivatkozas]; // Itt fog IndexOutOfBoundsException keletkezni
    } catch (IndexOutOfBoundsException ex) {
        tortentHiba = true;
        System.err.println("‚ùå Hiba: Nem l√©tez≈ë l√°d√°ra hivatkoztunk! (" + ex.getMessage() + ")");
    }

    assert tortentHiba : "Hib√°t kellett volna dobnia, de nem t√∂rt√©nt!";
    System.out.println("‚úÖ tesztHibasLadaHivatkozas lefutott");
    }
   
    public static void tesztNevHibasKivetel() {
        LadaModell lada = new LadaModell();
        boolean dobott = false;

        try {
            lada.setNev(null);
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "Null n√©v eset√©n kiv√©telt kell dobni";

        dobott = false;
        try {
            lada.setNev("");
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "√úres n√©v eset√©n kiv√©telt kell dobni";

        dobott = false;
        try {
            lada.setNev("   ");
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "Csak sz√≥k√∂z n√©v eset√©n kiv√©telt kell dobni";

        System.out.println("tesztNevHibasKivetel lefutott");
    }

    public static void tesztFeliratHibasKivetel() {
        LadaModell lada = new LadaModell();
        boolean dobott = false;

        try {
            lada.setFelirat(null);
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "Null felirat eset√©n kiv√©telt kell dobni";

        dobott = false;
        try {
            lada.setFelirat("");
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "√úres felirat eset√©n kiv√©telt kell dobni";

        dobott = false;
        try {
            lada.setFelirat("   ");
        } catch (IllegalArgumentException e) {
            dobott = true;
        }
        assert dobott : "Csak sz√≥k√∂z felirat eset√©n kiv√©telt kell dobni";

        System.out.println("tesztFeliratHibasKivetel lefutott");
    }

    public static void tesztToString() {
        LadaModell lada = new LadaModell();
        lada.setNev("Arany");
        lada.setFelirat("√ân rejtem a kincset.");
        lada.setTartalmazKincset(false);

        String szoveg = lada.toString();
        assert szoveg.contains("Arany") : "toString nem tartalmazza a nevet";
        assert szoveg.contains("rejtem") : "toString nem tartalmazza a feliratot";
        assert !szoveg.contains("[Kincs itt van]") : "toString t√©vesen jelzi a kincset";

        System.out.println("tesztToString lefutott");
    }

    private static void tesztHelyesValasztas() {
        TestGuiNezet helyesv = new TestGuiNezet();
        LogikaiLadaController controller = new LogikaiLadaController(null, helyesv);

        helyesv.rdbArany.setSelected(true);
        helyesv.rdbArany.doClick();

        assert helyesv.utolsoUzenet.contains("Gratul√°lok") : "A helyes v√°laszt√°sn√°l gratul√°ci√≥t kellett volna kapni.";
        System.out.println("tesztHelyesValasztas lefutott");
    }

    private static void tesztHelytelenValasztas() {
        TestGuiNezet helytelenv = new TestGuiNezet();
        LogikaiLadaController controller = new LogikaiLadaController(null, helytelenv);

        helytelenv.rdbBronz.setSelected(true);
        helytelenv.rdbBronz.doClick();

        assert helytelenv.utolsoUzenet.contains("Sajnos") : "A helytelen v√°laszt√°sn√°l 'Sajnos' √ºzenetnek kell megjelennie.";
        System.out.println("tesztHelytelenValasztas lefutott");
    }

    private static void tesztMegfeleloSzobeg() {
        TestGuiNezet mfszov = new TestGuiNezet();
        LogikaiLadaController controller = new LogikaiLadaController(null, mfszov);

        mfszov.rdbEzust.setSelected(true);
        mfszov.rdbEzust.doClick();

        String uzenet = mfszov.utolsoUzenet;
        assert (uzenet.startsWith("üéâ") || uzenet.startsWith("üò¢")) : "Az √ºzenetnek emojival kell kezd≈ëdnie.";
        assert uzenet.contains("l√°da") : "Az √ºzenetnek tartalmaznia kell a 'l√°da' sz√≥t.";
        System.out.println("tesztMegfeleloSzobeg lefutott");
    }

    private static class TestGuiNezet extends GuiNezet {

        String utolsoUzenet = "";
        JButton ujra = new JButton();
        JRadioButton rdbArany = new JRadioButton("Arany l√°da");
        JRadioButton rdbEzust = new JRadioButton("Ez√ºst l√°da");
        JRadioButton rdbBronz = new JRadioButton("Bronz l√°da");
        ButtonGroup group = new ButtonGroup();

        TestGuiNezet() {
            group.add(rdbArany);
            group.add(rdbEzust);
            group.add(rdbBronz);
        }

        @Override
        public JButton getBtnUjra() {
            return ujra;
        }

        @Override
        public JRadioButton getRdbArany() {
            return rdbArany;
        }

        @Override
        public JRadioButton getRdbEzust() {
            return rdbEzust;
        }

        @Override
        public JRadioButton getRdbBronz() {
            return rdbBronz;
        }

        @Override
        public ButtonGroup getButtonGroup1() {
            return group;
        }

        @Override
        public void mutat(String uzenet) {
            utolsoUzenet = uzenet;
        }

    }
}
